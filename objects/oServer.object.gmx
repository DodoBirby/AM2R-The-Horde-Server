<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>strict_init("dictionary.json");
canChange = true;
var type, port, maxClients;
type = network_socket_tcp;
port = 64198;
maxClients = 8;
server = network_create_server(type, port, maxClients);

port = 64199;
webpanel = network_create_server_raw(type, port, maxClients);

var size, type, alignment;
size = 1024;
type = buffer_grow;
alignment = 1;
buffer = buffer_create(size, type, alignment);

socketList = ds_list_create();
playerList = ds_list_create();

trackedList = ds_grid_create(3, 35);
vars = ds_grid_create(3, 35);
map = ds_map_create();

var import = json_import("item_dict.json");
dict = json_decode(import);

queenHealth = 600;
queenPhase = 0;
queenState = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canChange = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var type_event = ds_map_find_value(async_load, "type");

switch(type_event){
    case network_type_connect:
        var socket = ds_map_find_value(async_load, "socket");
        var findsocket = ds_list_find_index(socketList, socket);
        ds_list_add(socketList, socket); 
        buffer_delete(buffer);
        var size, type, alignment;
        size = 1024;
        type = buffer_grow;
        alignment = 1;
        buffer = buffer_create(size, type, alignment);
        buffer_seek(buffer, buffer_seek_start, 0);
        buffer_write(buffer, buffer_u8, 0);
        buffer_write(buffer, buffer_u8, ds_list_size(socketList));
        network_send_packet(socket, buffer, buffer_tell(buffer));
        if(trackedList[# 0, 1] == 0){
            
        }
        break;
    case network_type_disconnect:
        var socket = ds_map_find_value(async_load, "socket");
        var findsocket = ds_list_find_index(socketList, socket);
        
        if(findsocket &gt;= 0){
            ds_list_delete(socketList, findsocket);
        }
        
        var findsocket = ds_list_find_index(playerList, socket);
        
        if(findsocket &gt;= 0){
            ds_list_delete(playerList, findsocket);
        }
        break;
    case network_type_data:
        var _buffer = ds_map_find_value(async_load, "buffer");
        var socket = ds_map_find_value(async_load, "id");
        buffer_seek(_buffer, buffer_seek_start, 0);
        msgid = buffer_read(_buffer, buffer_u8);
        switch(msgid){
            case 0:
                ds_grid_read(vars, strict_decompress(buffer_read(_buffer, buffer_string)));
                clientID = buffer_read(_buffer, buffer_u8);
                packetID = buffer_read(_buffer, buffer_u32);
                buffer_delete(buffer);
                for(var i=0; i&lt;ds_grid_height(vars); i++){
                    if(vars[# 2, i] == 0){
                        var arrItem = vars[# 1, i];
                        for(var f=0; f&lt;array_height_2d(arrItem); f++){
                            var findValue = ds_map_find_value(dict, string(arrItem[f, 1]));
                            ds_map_add(map, findValue, arrItem[f, 0]);
                            show_debug_message(findValue + " " + string(arrItem[f, 0]));
                        }
                        buffer_delete(buffer);
                        var size, type, alignment;
                        size = 1024;
                        type = buffer_grow;
                        alignment = 1;
                        buffer = buffer_create(size, type, alignment);
                        buffer_seek(buffer, buffer_seek_start, 0);
                        buffer_write(buffer, buffer_u8, 255);
                        buffer_write(buffer, buffer_string, json_encode(map));
                        var sockets = ds_list_size(socketList);
                        for(var v=0; v&lt;sockets; v++){
                            network_send_raw(socketList[| i], buffer, buffer_tell(buffer));
                        }
                        ds_map_clear(map);
                    }
                }
                buffer_delete(buffer);
                var size, type, alignment;
                size = 1024;
                type = buffer_grow;
                alignment = 1;
                buffer = buffer_create(size, type, alignment);
                buffer_seek(buffer, buffer_seek_start, 0);
                buffer_write(buffer, buffer_u8, 1);
                buffer_write(buffer, buffer_string, strict_compress(ds_grid_write(vars)));
                buffer_write(buffer, buffer_u8, clientID);
                buffer_write(buffer, buffer_u32, packetID);
                var sockets = ds_list_size(playerList);
                for(var i=0; i&lt;sockets; i++){
                    if(playerList[| i] != socket){
                        network_send_packet(playerList[| i], buffer, buffer_tell(buffer));
                    } else {
                        var size, type, alignment;
                        size = 1024;
                        type = buffer_grow;
                        alignment = 1;
                        socketBuffer = buffer_create(size, type, alignment);
                        buffer_seek(socketBuffer, buffer_seek_start, 0);
                        buffer_write(socketBuffer, buffer_u8, 2);
                        buffer_write(socketBuffer, buffer_string, strict_compress(ds_grid_write(vars)));
                        buffer_write(socketBuffer, buffer_u8, clientID);
                        network_send_packet(playerList[| i], socketBuffer, buffer_tell(socketBuffer));
                        buffer_delete(socketBuffer);
                    }
                }
                //network_send_packet(socket, buffer, buffer_tell(buffer));
                break;
            case 1: 
                var findsocket = ds_list_find_index(playerList, socket);
                if(findsocket &lt; 0){
                    ds_list_add(playerList, socket); 
                }
                break;
            case 2:
                var _queenHealth = buffer_read(_buffer, buffer_s16);
                var sockets = ds_list_size(playerList);
                var clientID = buffer_read(_buffer, buffer_u8);
                var phase = buffer_read(_buffer, buffer_s8);
                var state = buffer_read(_buffer, buffer_s8);
                if(queenHealth != _queenHealth){
                    queenHealth = _queenHealth;
                }
                if(queenPhase != phase){
                    queenPhase = phase;
                }
                if(queenState != state){
                    queenState = state;
                }
                buffer_delete(buffer);
                var size, type, alignment;
                size = 1024;
                type = buffer_grow;
                alignment = 1;
                buffer = buffer_create(size, type, alignment);
                buffer_seek(buffer, buffer_seek_start, 0);
                buffer_write(buffer, buffer_u8, 3);
                buffer_write(buffer, buffer_s16, queenHealth);
                buffer_write(buffer, buffer_u8, clientID);
                buffer_write(buffer, buffer_s8, queenPhase);
                buffer_write(buffer, buffer_s8, queenState);
                var sockets = ds_list_size(playerList);
                for(var i=0; i&lt;sockets; i++){
                    network_send_packet(playerList[| i], buffer, buffer_tell(buffer));
                }
                break;
            case 3:
                var seed = buffer_read(_buffer, buffer_f64);
                var clientID = buffer_read(_buffer, buffer_u8);
                var sockets = ds_list_size(playerList);
                buffer_delete(buffer);
                var size, type, alignment;
                size = 1024;
                type = buffer_grow;
                alignment = 1;
                buffer = buffer_create(size, type, alignment);
                buffer_seek(buffer, buffer_seek_start, 0);
                buffer_write(buffer, buffer_u8, 4);
                buffer_write(buffer, buffer_f64, seed);
                buffer_write(buffer, buffer_u8, clientID);
                for(var i=0; i&lt;sockets; i++){
                    network_send_packet(playerList[| i], buffer, buffer_tell(buffer));
                }
                break;
    }
    break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>network_destroy(server);
buffer_delete(buffer);
ds_list_destroy(socketList);
ds_list_destroy(vars);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var str;
if(server &gt;= 0){
    str = "Running";
} else {
    str = "Not running";
}


draw_set_font(font0);
draw_text(5, 5, "AM2R Server: " + string(str));
draw_text(5, 20, "Connected Clients: " + string(ds_list_size(playerList)));

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
