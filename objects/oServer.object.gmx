<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();
strict_init("dictionary.json");
canChange = true;
var type, maxClients;
type = network_socket_tcp;
ini_open("settings.ini");
port = ini_read_real("Settings", "port", 64198);
maxClients = ini_read_real("Settings", "maxplayers", 8);
ini_close();
server = network_create_server(type, port, maxClients);

var _port = 64199;
webpanel = network_create_server_raw(type, _port, 2);

var size, type, alignment;
size = 1024;
type = buffer_grow;
alignment = 1;
buffer = buffer_create(size, type, alignment);

socketList = ds_list_create();
playerList = ds_list_create();
idList = ds_list_create();
timeList = ds_list_create();

vars = ds_grid_create(3, 20);
map = ds_map_create();

var import = json_import("item_dict.json");
dict = json_decode(import);

queenHealth = 600;
queenPhase = 0;
queenState = 0;

prevPlayerListSize = ds_list_size(playerList);

alarm[1] = 90;
alarm[2] = 300;
alarm[5] = 3600;

reset_globals();

sendSize = 300;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var size, type, alignment;
size = 1024;
type = buffer_grow;
alignment = 1;
dmapBuffer = buffer_create(size, type, alignment);
buffer_seek(dmapBuffer, buffer_seek_start, 0);
buffer_write(dmapBuffer, buffer_u8, 53);

buffer_write(dmapBuffer, buffer_u8, 4);

for(var i=0; i&lt;array_height_2d(global.dmap); i++){
    for(var j=0; j&lt;array_length_2d(global.dmap, i); j++){
        if(i &gt;= 60 &amp;&amp; i &lt; 80){
            buffer_write(dmapBuffer, buffer_u8, global.dmap[i, j]);
        }
    }
}

var sockets = ds_list_size(playerList);
for(var i=0; i&lt;sockets; i++){
    network_send_packet(playerList[| i], dmapBuffer, buffer_tell(dmapBuffer));
}

buffer_delete(dmapBuffer);
alarm[5] = 3600;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var size, type, alignment;
size = 1024;
type = buffer_grow;
alignment = 1;
dmapBuffer = buffer_create(size, type, alignment);
buffer_seek(dmapBuffer, buffer_seek_start, 0);
buffer_write(dmapBuffer, buffer_u8, 53);

buffer_write(dmapBuffer, buffer_u8, 3);

for(var i=0; i&lt;array_height_2d(global.dmap); i++){
    for(var j=0; j&lt;array_length_2d(global.dmap, i); j++){
        if(i &gt;= 40 &amp;&amp; i &lt; 60){
            buffer_write(dmapBuffer, buffer_u8, global.dmap[i, j]);
        }
    }
}

var sockets = ds_list_size(playerList);
for(var i=0; i&lt;sockets; i++){
    network_send_packet(playerList[| i], dmapBuffer, buffer_tell(dmapBuffer));
}

buffer_delete(dmapBuffer);
alarm[8] = 120;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var size, type, alignment;
size = 1024;
type = buffer_grow;
alignment = 1;
dmapBuffer = buffer_create(size, type, alignment);
buffer_seek(dmapBuffer, buffer_seek_start, 0);
buffer_write(dmapBuffer, buffer_u8, 53);

buffer_write(dmapBuffer, buffer_u8, 2);

for(var i=0; i&lt;array_height_2d(global.dmap); i++){
    for(var j=0; j&lt;array_length_2d(global.dmap, i); j++){
        if(i &gt;= 20 &amp;&amp; i &lt; 40){
            buffer_write(dmapBuffer, buffer_u8, global.dmap[i, j]);
        }
    }
}

var sockets = ds_list_size(playerList);
for(var i=0; i&lt;sockets; i++){
    network_send_packet(playerList[| i], dmapBuffer, buffer_tell(dmapBuffer));
}

buffer_delete(dmapBuffer);
alarm[7] = 120;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var size, type, alignment;
size = 1024;
type = buffer_grow;
alignment = 1;
dmapBuffer = buffer_create(size, type, alignment);
buffer_seek(dmapBuffer, buffer_seek_start, 0);
buffer_write(dmapBuffer, buffer_u8, 53);
buffer_write(dmapBuffer, buffer_u8, 1);


for(var i=0; i&lt;array_height_2d(global.dmap); i++){
    for(var j=0; j&lt;array_length_2d(global.dmap, i); j++){
        if(i &lt; 20){
            buffer_write(dmapBuffer, buffer_u8, global.dmap[i, j]);
        }
    }
}

var sockets = ds_list_size(playerList);
for(var i=0; i&lt;sockets; i++){
    network_send_packet(playerList[| i], dmapBuffer, buffer_tell(dmapBuffer));
}

buffer_delete(dmapBuffer);
alarm[6] = 120;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var size, type, alignment;
size = 1024;
type = buffer_grow;
alignment = 1;
metdeadBuffer = buffer_create(size, type, alignment);
buffer_seek(metdeadBuffer, buffer_seek_start, 0);
buffer_write(metdeadBuffer, buffer_u8, 52);
for(var i=0; i&lt;array_length_1d(global.metdead); i++){
    buffer_write(metdeadBuffer, buffer_u8, global.metdead[i]);
}

var sockets = ds_list_size(playerList);
for(var i=0; i&lt;sockets; i++){
    network_send_packet(playerList[| i], metdeadBuffer, buffer_tell(metdeadBuffer));
}

buffer_delete(metdeadBuffer);
alarm[2] = 300;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var size, type, alignment;
size = 1024;
type = buffer_grow;
alignment = 1;
eventBuffer = buffer_create(size, type, alignment);
buffer_seek(eventBuffer, buffer_seek_start, 0);
buffer_write(eventBuffer, buffer_u8, 51);
for(var i=0; i&lt;array_length_1d(global.event); i++){
    buffer_write(eventBuffer, buffer_u8, global.event[i]);
}

var sockets = ds_list_size(playerList);
for(var i=0; i&lt;sockets; i++){
    network_send_packet(playerList[| i], eventBuffer, buffer_tell(eventBuffer));
}

buffer_delete(eventBuffer);
alarm[4] = 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var size, type, alignment;
size = 1024;
type = buffer_grow;
alignment = 1;
itemBuffer = buffer_create(size, type, alignment);
buffer_seek(itemBuffer, buffer_seek_start, 0);
buffer_write(itemBuffer, buffer_u8, 50);
for(var i=0; i&lt;array_length_1d(global.item); i++){
    buffer_write(itemBuffer, buffer_u8, global.item[i]);
}

var sockets = ds_list_size(playerList);
for(var i=0; i&lt;sockets; i++){
    network_send_packet(playerList[| i], itemBuffer, buffer_tell(itemBuffer));
}

buffer_delete(itemBuffer);
alarm[3] = 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>buffer_delete(buffer);
var size, type, alignment;
size = 1024;
type = buffer_grow;
alignment = 1;
buffer = buffer_create(size, type, alignment);
buffer_seek(buffer, buffer_seek_start, 0);
buffer_write(buffer, buffer_u8, 103);
var sockets = ds_list_size(playerList);
for(var i=0; i&lt;sockets; i++){
    network_send_packet(playerList[| i], buffer, buffer_tell(buffer));
}
alarm[1] = 90;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canChange = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(prevPlayerListSize != ds_list_size(playerList) &amp;&amp; ds_list_size(playerList) &gt; 0){
    prevPlayerListSize = ds_list_size(playerList);
    var sockets = ds_list_size(playerList);
    buffer_delete(buffer);
    var size, type, alignment;
    size = 1024;
    type = buffer_grow;
    alignment = 1;
    buffer = buffer_create(size, type, alignment);
    buffer_seek(buffer, buffer_seek_start, 0);
    buffer_write(buffer, buffer_u8, 102);
    buffer_write(buffer, buffer_string, strict_compress(ds_list_write(idList)));
    for(var i=0; i&lt;sockets; i++){
        network_send_packet(playerList[| i], buffer, buffer_tell(buffer));
    }
}

if(ds_list_size(playerList) &gt; 0 &amp;&amp; ds_list_size(timeList) &gt; 0){
    if(ds_list_size(playerList) == ds_list_size(timeList) || ds_list_size(timeList) &gt; ds_list_size(playerList)){
        ds_list_sort(timeList, false);
        var time = timeList[| 0];
        var sockets = ds_list_size(playerList);
        buffer_delete(buffer);
        var size, type, alignment;
        size = 1024;
        type = buffer_grow;
        alignment = 1;
        buffer = buffer_create(size, type, alignment);
        buffer_seek(buffer, buffer_seek_start, 0);
        buffer_write(buffer, buffer_u8, 20);
        buffer_write(buffer, buffer_s32, time);
        for(var i=0; i&lt;sockets; i++){
            network_send_packet(playerList[| i], buffer, buffer_tell(buffer));
        }
        ds_list_clear(timeList);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var type_event = ds_map_find_value(async_load, "type");

switch(type_event){
    case network_type_connect:
        var socket = ds_map_find_value(async_load, "socket");
        var findsocket = ds_list_find_index(socketList, socket);
        var ID;
        var arr;
        ds_list_add(socketList, socket); 
        if(ds_list_size(idList) &gt; 0){
            ID = irandom_range(1, 8);
            for(var i=0; i&lt;ds_list_size(idList); i++){
                var arrList = idList[| i];
                if(ID == arrList[0, 0]){
                    ID = irandom_range(1, 8);
                    i = 0;
                }
            }
        } else {
            ID = irandom_range(1, 8);
        }
        buffer_delete(buffer);
        var size, type, alignment;
        size = 1024;
        type = buffer_grow;
        alignment = 1;
        buffer = buffer_create(size, type, alignment);
        buffer_seek(buffer, buffer_seek_start, 0);
        buffer_write(buffer, buffer_u8, 0);
        buffer_write(buffer, buffer_u8, ID);
        network_send_packet(socket, buffer, buffer_tell(buffer));
        arr[0, 0] = ID;
        arr[0, 1] = socket;
        ds_list_add(idList, arr);
        break;
    case network_type_disconnect:
        var socket = ds_map_find_value(async_load, "socket");
        var findsocket = ds_list_find_index(socketList, socket);
        
        if(findsocket &gt;= 0){
            ds_list_delete(socketList, findsocket);
        }
        
        var findsocket = ds_list_find_index(playerList, socket);
        
        if(findsocket &gt;= 0){
            for(var i=0; i&lt;ds_list_size(idList); i++){
                var arrList = idList[| i];
                if(arrList[0, 1] == socket){
                    ds_list_delete(idList, i);
                }
            }
            ds_list_delete(playerList, findsocket);
        }
        if(ds_list_size(playerList) == 0){
            reset_globals();
        }
        break;
    case network_type_data:
        var _buffer = ds_map_find_value(async_load, "buffer");
        var socket = ds_map_find_value(async_load, "id");
        buffer_seek(_buffer, buffer_seek_start, 0);
        msgid = buffer_read(_buffer, buffer_u8);
        switch(msgid){
            case 254:
                var clientID = buffer_read(_buffer, buffer_u8);
                for(var i=0; i&lt;ds_list_size(idList); i++){
                    var arrList = idList[| i];
                    if(arrList[0, 0] == clientID){
                        ds_list_delete(idList, i);
                    }
                }
                
                var sockets = ds_list_size(playerList);
                buffer_delete(buffer);
                var size, type, alignment;
                size = 1024;
                type = buffer_grow;
                alignment = 1;
                buffer = buffer_create(size, type, alignment);
                buffer_seek(buffer, buffer_seek_start, 0);
                buffer_write(buffer, buffer_u8, 254);
                buffer_write(buffer, buffer_u8, clientID);
                for(var i=0; i&lt;sockets; i++){
                    network_send_packet(playerList[| i], buffer, buffer_tell(buffer));
                }
                break;
            case 200:
                var clientID = buffer_read(_buffer, buffer_u8);
                var preferredID = buffer_read(_buffer, buffer_u8);
                tempList = ds_list_create();
                if(ds_list_size(idList) &gt; 0){
                    for(var i=0; i&lt;ds_list_size(idList); i++){
                        var arrList = idList[| i];
                        ds_list_add(tempList, arrList[0, 0]);
                    }
                }
                var findID = ds_list_find_index(tempList, preferredID);
                if(ds_list_size(idList) &gt; 0){
                    for(var i=0; i&lt;ds_list_size(idList); i++){
                        var arrList = idList[| i];
                        if(clientID == arrList[0, 0]){
                            if(preferredID &gt;= 1 &amp;&amp; preferredID &lt;= 8){
                                if(findID == -1){
                                    arrList[0, 0] = preferredID;
                                    idList[| i] = arrList;
                                    var sockets = ds_list_size(playerList);
                                    buffer_delete(buffer);
                                    var size, type, alignment;
                                    size = 1024;
                                    type = buffer_grow;
                                    alignment = 1;
                                    buffer = buffer_create(size, type, alignment);
                                    buffer_seek(buffer, buffer_seek_start, 0);
                                    buffer_write(buffer, buffer_u8, 102);
                                    buffer_write(buffer, buffer_string, strict_compress(ds_list_write(idList)));
                                    for(var i=0; i&lt;sockets; i++){
                                        network_send_packet(playerList[| i], buffer, buffer_tell(buffer));
                                    }
                                    
                                    buffer_delete(buffer);
                                    var size, type, alignment;
                                    size = 1024;
                                    type = buffer_grow;
                                    alignment = 1;
                                    buffer = buffer_create(size, type, alignment);
                                    buffer_seek(buffer, buffer_seek_start, 0);
                                    buffer_write(buffer, buffer_u8, 200);
                                    network_send_packet(socket, buffer, buffer_tell(buffer));
                                }
                            }
                        }
                    }
                }
                ds_list_destroy(tempList);
                break;
            case 100:
                var clientID = buffer_read(_buffer, buffer_u8);
                var clientX = buffer_read(_buffer, buffer_s16);
                var clientY = buffer_read(_buffer, buffer_s16);
                var clientSprite = buffer_read(_buffer, buffer_s16);
                var clientImage = buffer_read(_buffer, buffer_s16);
                var clientA1 = buffer_read(_buffer, buffer_s16);
                var clientA1X = buffer_read(_buffer, buffer_s16);
                var clientA1Y = buffer_read(_buffer, buffer_s16);
                var clientA2 = buffer_read(_buffer, buffer_s16);
                var clientA2X = buffer_read(_buffer, buffer_s16);
                var clientA2Y = buffer_read(_buffer, buffer_s16);
                var clientA2A = buffer_read(_buffer, buffer_s16);
                var clientMirror = buffer_read(_buffer, buffer_s16);
                var clientArmmsl = buffer_read(_buffer, buffer_s16);
                var clientRoom = buffer_read(_buffer, buffer_s16);
                var clientName = buffer_read(_buffer, buffer_string);
                var clientBlend = buffer_read(_buffer, buffer_s16);
                var clientFXTimer = buffer_read(_buffer, buffer_s8);
                var clientRoomPrev = buffer_read(_buffer, buffer_s16);
                var sockets = ds_list_size(playerList);
                buffer_delete(buffer);
                var size, type, alignment;
                size = 1024;
                type = buffer_grow;
                alignment = 1;
                buffer = buffer_create(size, type, alignment);
                buffer_seek(buffer, buffer_seek_start, 0);
                buffer_write(buffer, buffer_u8, 100);
                buffer_write(buffer, buffer_u8, clientID);
                buffer_write(buffer, buffer_s16, clientX);
                buffer_write(buffer, buffer_s16, clientY);
                buffer_write(buffer, buffer_s16, clientSprite);
                buffer_write(buffer, buffer_s16, clientImage);
                buffer_write(buffer, buffer_s16, clientA1);
                buffer_write(buffer, buffer_s16, clientA1X);
                buffer_write(buffer, buffer_s16, clientA1Y);
                buffer_write(buffer, buffer_s16, clientA2);
                buffer_write(buffer, buffer_s16, clientA2X);
                buffer_write(buffer, buffer_s16, clientA2Y);
                buffer_write(buffer, buffer_s16, clientA2A);
                buffer_write(buffer, buffer_s16, clientMirror);
                buffer_write(buffer, buffer_s16, clientArmmsl);
                buffer_write(buffer, buffer_s16, clientRoom);
                buffer_write(buffer, buffer_string, clientName);
                buffer_write(buffer, buffer_s16, clientBlend);
                buffer_write(buffer, buffer_s8, clientFXTimer);
                buffer_write(buffer, buffer_s16, clientRoomPrev);
                for(var i=0; i&lt;sockets; i++){
                    if(playerList[| i] != socket){
                        network_send_packet(playerList[| i], buffer, buffer_tell(buffer));
                    }
                }
                break;
            case 101:
                var clientID = buffer_read(_buffer, buffer_u8);
                var clientRoom = buffer_read(_buffer, buffer_s16);
                var clientMapX = buffer_read(_buffer, buffer_s16);
                var clientMapY = buffer_read(_buffer, buffer_s16);
                var sockets = ds_list_size(playerList);
                buffer_delete(buffer);
                var size, type, alignment;
                size = 1024;
                type = buffer_grow;
                alignment = 1;
                buffer = buffer_create(size, type, alignment);
                buffer_seek(buffer, buffer_seek_start, 0);
                buffer_write(buffer, buffer_u8, 101);
                buffer_write(buffer, buffer_u8, clientID);
                buffer_write(buffer, buffer_s16, clientRoom);
                buffer_write(buffer, buffer_s16, clientMapX);
                buffer_write(buffer, buffer_s16, clientMapY);
                for(var i=0; i&lt;sockets; i++){
                    if(playerList[| i] != socket){
                        network_send_packet(playerList[| i], buffer, buffer_tell(buffer));
                    }
                }
                break;
            case 102:
                var playerHealth = buffer_read(_buffer, buffer_s16);
                var missiles = buffer_read(_buffer, buffer_s16);
                var smissiles = buffer_read(_buffer, buffer_u8);
                var pbombs = buffer_read(_buffer, buffer_u8);
                var clientID = buffer_read(_buffer, buffer_u8);
                var sockets = ds_list_size(playerList);
                buffer_delete(buffer);
                var size, type, alignment;
                size = 1024;
                type = buffer_grow;
                alignment = 1;
                buffer = buffer_create(size, type, alignment);
                buffer_seek(buffer, buffer_seek_start, 0);
                buffer_write(buffer, buffer_u8, 104);
                buffer_write(buffer, buffer_s16, playerHealth);
                buffer_write(buffer, buffer_s16, missiles);
                buffer_write(buffer, buffer_u8, smissiles);
                buffer_write(buffer, buffer_u8, pbombs);
                buffer_write(buffer, buffer_u8, clientID);
                for(var i=0; i&lt;sockets; i++){
                    if(playerList[| i] != socket){
                        network_send_packet(playerList[| i], buffer, buffer_tell(buffer));
                    }
                }
                break;
            case 103:
                var ping = buffer_read(_buffer, buffer_u32);
                buffer_delete(buffer);
                var size, type, alignment;
                size = 1024;
                type = buffer_grow;
                alignment = 1;
                buffer = buffer_create(size, type, alignment);
                buffer_seek(buffer, buffer_seek_start, 0);
                buffer_write(buffer, buffer_u8, 105);
                buffer_write(buffer, buffer_u32, ping);
                network_send_packet(socket, buffer, buffer_tell(buffer));
                break;
            case 0:
                ds_grid_read(vars, strict_decompress(buffer_read(_buffer, buffer_string)));
                var clientID = buffer_read(_buffer, buffer_u8);
                var packetID = buffer_read(_buffer, buffer_u32);
                /*
                buffer_delete(buffer);
                for(var i=0; i&lt;ds_grid_height(vars); i++){
                    if(vars[# 2, i] == 0){
                        var arrItem = vars[# 1, i];
                        for(var f=0; f&lt;array_height_2d(arrItem); f++){
                            var findValue = ds_map_find_value(dict, string(arrItem[f, 1]));
                            ds_map_add(map, findValue, arrItem[f, 0]);
                            show_debug_message(findValue + " " + string(arrItem[f, 0]));
                        }
                        buffer_delete(buffer);
                        var size, type, alignment;
                        size = 1024;
                        type = buffer_grow;
                        alignment = 1;
                        buffer = buffer_create(size, type, alignment);
                        buffer_seek(buffer, buffer_seek_start, 0);
                        buffer_write(buffer, buffer_u8, 255);
                        buffer_write(buffer, buffer_string, json_encode(map));
                        var sockets = ds_list_size(socketList);
                        for(var v=0; v&lt;sockets; v++){
                            network_send_raw(socketList[| i], buffer, buffer_tell(buffer));
                        }
                        ds_map_clear(map);
                    }
                }
                */
                buffer_delete(buffer);
                var size, type, alignment;
                size = 1024;
                type = buffer_grow;
                alignment = 1;
                buffer = buffer_create(size, type, alignment);
                buffer_seek(buffer, buffer_seek_start, 0);
                buffer_write(buffer, buffer_u8, 1);
                buffer_write(buffer, buffer_string, strict_compress(ds_grid_write(vars)));
                buffer_write(buffer, buffer_u8, clientID);
                buffer_write(buffer, buffer_u32, packetID);
                var sockets = ds_list_size(playerList);
                for(var i=0; i&lt;sockets; i++){
                    if(playerList[| i] != socket){
                        network_send_packet(playerList[| i], buffer, buffer_tell(buffer));
                    } else {
                        var size, type, alignment;
                        size = 1024;
                        type = buffer_grow;
                        alignment = 1;
                        socketBuffer = buffer_create(size, type, alignment);
                        buffer_seek(socketBuffer, buffer_seek_start, 0);
                        buffer_write(socketBuffer, buffer_u8, 2);
                        buffer_write(socketBuffer, buffer_string, strict_compress(ds_grid_write(vars)));
                        buffer_write(socketBuffer, buffer_u8, clientID);
                        network_send_packet(playerList[| i], socketBuffer, buffer_tell(socketBuffer));
                        buffer_delete(socketBuffer);
                    }
                }
                //network_send_packet(socket, buffer, buffer_tell(buffer));
                break;
            case 1:
                var findsocket = ds_list_find_index(playerList, socket);
                if(findsocket &lt; 0){
                    ds_list_add(playerList, socket); 
                }
                break;
            case 2:
                var _queenHealth = buffer_read(_buffer, buffer_s32);
                var sockets = ds_list_size(playerList);
                var clientID = buffer_read(_buffer, buffer_u8);
                var phase = buffer_read(_buffer, buffer_s8);
                var state = buffer_read(_buffer, buffer_s8);
                if(queenHealth != _queenHealth){
                    queenHealth = _queenHealth;
                }
                if(queenPhase != phase){
                    queenPhase = phase;
                }
                if(queenState != state){
                    queenState = state;
                }
                buffer_delete(buffer);
                var size, type, alignment;
                size = 1024;
                type = buffer_grow;
                alignment = 1;
                buffer = buffer_create(size, type, alignment);
                buffer_seek(buffer, buffer_seek_start, 0);
                buffer_write(buffer, buffer_u8, 3);
                buffer_write(buffer, buffer_s32, queenHealth);
                buffer_write(buffer, buffer_u8, clientID);
                buffer_write(buffer, buffer_s8, queenPhase);
                buffer_write(buffer, buffer_s8, queenState);
                var sockets = ds_list_size(playerList);
                for(var i=0; i&lt;sockets; i++){
                    network_send_packet(playerList[| i], buffer, buffer_tell(buffer));
                }
                break;
            case 3:
                var seed = buffer_read(_buffer, buffer_f64);
                var clientID = buffer_read(_buffer, buffer_u8);
                var sockets = ds_list_size(playerList);
                buffer_delete(buffer);
                var size, type, alignment;
                size = 1024;
                type = buffer_grow;
                alignment = 1;
                buffer = buffer_create(size, type, alignment);
                buffer_seek(buffer, buffer_seek_start, 0);
                buffer_write(buffer, buffer_u8, 4);
                buffer_write(buffer, buffer_f64, seed);
                buffer_write(buffer, buffer_u8, clientID);
                for(var i=0; i&lt;sockets; i++){
                    network_send_packet(playerList[| i], buffer, buffer_tell(buffer));
                }
                break;
            case 4:
                var monstersLeft = buffer_read(_buffer, buffer_s8);
                var clientID = buffer_read(_buffer, buffer_u8);
                var sockets = ds_list_size(playerList);
                buffer_delete(buffer);
                var size, type, alignment;
                size = 1024;
                type = buffer_grow;
                alignment = 1;
                buffer = buffer_create(size, type, alignment);
                buffer_seek(buffer, buffer_seek_start, 0);
                buffer_write(buffer, buffer_u8, 5);
                buffer_write(buffer, buffer_s8, monstersLeft);
                buffer_write(buffer, buffer_u8, clientID);
                for(var i=0; i&lt;sockets; i++){
                    network_send_packet(playerList[| i], buffer, buffer_tell(buffer));
                }
                break;
            case 5:
                var monstersArea = buffer_read(_buffer, buffer_s8);
                var clientID = buffer_read(_buffer, buffer_u8);
                var sockets = ds_list_size(playerList);
                buffer_delete(buffer);
                var size, type, alignment;
                size = 1024;
                type = buffer_grow;
                alignment = 1;
                buffer = buffer_create(size, type, alignment);
                buffer_seek(buffer, buffer_seek_start, 0);
                buffer_write(buffer, buffer_u8, 6);
                buffer_write(buffer, buffer_s8, monstersArea);
                buffer_write(buffer, buffer_u8, clientID);
                for(var i=0; i&lt;sockets; i++){
                    network_send_packet(playerList[| i], buffer, buffer_tell(buffer));
                }
                break;
            case 6:
                var item = ds_list_create();
                ds_list_read(item, strict_decompress(buffer_read(_buffer, buffer_string)));
                var clientID = buffer_read(_buffer, buffer_u8);
                var sockets = ds_list_size(playerList);
                var itemArr = item[| 0];
                if(is_array(itemArr)){
                    for(var i=0; i&lt;array_length_1d(global.item); i++){
                        for(var f=0; f&lt;array_height_2d(itemArr); f++){
                            if(i == itemArr[f, 1]){
                                if(global.item[i] != itemArr[f, 0] &amp;&amp; itemArr[f, 0] == 1){
                                    global.item[i] = itemArr[f, 0];
                                }
                            }
                        }
                    }
                }
                buffer_delete(buffer);
                var size, type, alignment;
                size = 1024;
                type = buffer_grow;
                alignment = 1;
                buffer = buffer_create(size, type, alignment);
                buffer_seek(buffer, buffer_seek_start, 0);
                buffer_write(buffer, buffer_u8, 7);
                buffer_write(buffer, buffer_string, strict_compress(ds_list_write(item)));
                buffer_write(buffer, buffer_u8, clientID);
                for(var i=0; i&lt;sockets; i++){
                    network_send_packet(playerList[| i], buffer, buffer_tell(buffer));
                }
                ds_list_destroy(item);
                break;
            case 7:
                var metdead = ds_list_create();
                ds_list_read(metdead, strict_decompress(buffer_read(_buffer, buffer_string)));
                var clientID = buffer_read(_buffer, buffer_u8);
                var sockets = ds_list_size(playerList);
                var metdeadArr = metdead[| 0];
                if(is_array(metdeadArr)){
                    for(var i=0; i&lt;array_length_1d(global.metdead); i++){
                        for(var f=0; f&lt;array_height_2d(metdeadArr); f++){
                            if(i == metdeadArr[f, 1]){
                                if(global.metdead[i] != metdeadArr[f, 0] &amp;&amp; metdeadArr[f, 0] == 1){
                                    global.metdead[i] = metdeadArr[f, 0];
                                }
                            }
                        }
                    }
                }
                buffer_delete(buffer);
                var size, type, alignment;
                size = 1024;
                type = buffer_grow;
                alignment = 1;
                buffer = buffer_create(size, type, alignment);
                buffer_seek(buffer, buffer_seek_start, 0);
                buffer_write(buffer, buffer_u8, 8);
                buffer_write(buffer, buffer_string, strict_compress(ds_list_write(metdead)));
                buffer_write(buffer, buffer_u8, clientID);
                for(var i=0; i&lt;sockets; i++){
                    network_send_packet(playerList[| i], buffer, buffer_tell(buffer));
                }
                ds_list_destroy(metdead);
                break;
            case 8:
                var event = ds_list_create();
                ds_list_read(event, strict_decompress(buffer_read(_buffer, buffer_string)));
                var clientID = buffer_read(_buffer, buffer_u8);
                var sockets = ds_list_size(playerList);
                var eventArr = event[| 0];
                if(is_array(eventArr)){
                    for(var i=0; i&lt;array_length_1d(global.event); i++){
                        for(var f=0; f&lt;array_height_2d(eventArr); f++){
                            if(i == eventArr[f, 1]){
                                if(global.event[i] != eventArr[f, 0] &amp;&amp; eventArr[f, 0] == 1){
                                    global.event[i] = eventArr[f, 0];
                                }
                            }
                        }
                    }
                }
                buffer_delete(buffer);
                var size, type, alignment;
                size = 1024;
                type = buffer_grow;
                alignment = 1;
                buffer = buffer_create(size, type, alignment);
                buffer_seek(buffer, buffer_seek_start, 0);
                buffer_write(buffer, buffer_u8, 9);
                buffer_write(buffer, buffer_string, strict_compress(ds_list_write(event)));
                buffer_write(buffer, buffer_u8, clientID);
                for(var i=0; i&lt;sockets; i++){
                    network_send_packet(playerList[| i], buffer, buffer_tell(buffer));
                }
                ds_list_destroy(event);
                break;
            case 9:
                var dmap = ds_list_create();
                ds_list_read(dmap, strict_decompress(buffer_read(_buffer, buffer_string)));
                var clientID = buffer_read(_buffer, buffer_u8);
                var sockets = ds_list_size(playerList);
                var dmapArr = dmap[| 0];
                if(is_array(dmapArr)){
                    for(var i=0; i&lt;array_height_2d(global.dmap); i++){
                        for(var f=0; f&lt;array_length_2d(global.dmap, i); f++){
                            for(var v=0; v&lt;array_height_2d(dmapArr); v++){
                                if(i == dmapArr[v, 1] &amp;&amp; f == dmapArr[v, 2]){
                                    if(dmapArr[v, 0] &gt; global.dmap[i, f]){
                                        global.dmap[i, f] = dmapArr[v, 0];
                                    } else if(dmapArr[v, 0] &lt; global.dmap[i, f]){
                                        if(global.dmap[i, f] == 10 &amp;&amp; dmapArr[v, 0] == 1){
                                            global.dmap[i, f] = dmapArr[v, 0];
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                buffer_delete(buffer);
                var size, type, alignment;
                size = 1024;
                type = buffer_grow;
                alignment = 1;
                buffer = buffer_create(size, type, alignment);
                buffer_seek(buffer, buffer_seek_start, 0);
                buffer_write(buffer, buffer_u8, 10);
                buffer_write(buffer, buffer_string, strict_compress(ds_list_write(dmap)));
                buffer_write(buffer, buffer_u8, clientID);
                for(var i=0; i&lt;sockets; i++){
                    network_send_packet(playerList[| i], buffer, buffer_tell(buffer));
                }
                ds_list_destroy(dmap);
                break;
            case 10:
                var itemstaken = buffer_read(_buffer, buffer_u8);
                var clientID = buffer_read(_buffer, buffer_u8);
                var sockets = ds_list_size(playerList);
                buffer_delete(buffer);
                var size, type, alignment;
                size = 1024;
                type = buffer_grow;
                alignment = 1;
                buffer = buffer_create(size, type, alignment);
                buffer_seek(buffer, buffer_seek_start, 0);
                buffer_write(buffer, buffer_u8, 11);
                buffer_write(buffer, buffer_u8, itemstaken);
                buffer_write(buffer, buffer_u8, clientID);
                for(var i=0; i&lt;sockets; i++){
                    network_send_packet(playerList[| i], buffer, buffer_tell(buffer));
                }
                break;
            case 11:
                var maxmissiles = buffer_read(_buffer, buffer_u16);
                var clientID = buffer_read(_buffer, buffer_u8);
                var sockets = ds_list_size(playerList);
                buffer_delete(buffer);
                var size, type, alignment;
                size = 1024;
                type = buffer_grow;
                alignment = 1;
                buffer = buffer_create(size, type, alignment);
                buffer_seek(buffer, buffer_seek_start, 0);
                buffer_write(buffer, buffer_u8, 12);
                buffer_write(buffer, buffer_u16, maxmissiles);
                buffer_write(buffer, buffer_u8, clientID);
                for(var i=0; i&lt;sockets; i++){
                    network_send_packet(playerList[| i], buffer, buffer_tell(buffer));
                }
                break;
            case 12:
                var maxsmissiles = buffer_read(_buffer, buffer_u8);
                var clientID = buffer_read(_buffer, buffer_u8);
                var sockets = ds_list_size(playerList);
                buffer_delete(buffer);
                var size, type, alignment;
                size = 1024;
                type = buffer_grow;
                alignment = 1;
                buffer = buffer_create(size, type, alignment);
                buffer_seek(buffer, buffer_seek_start, 0);
                buffer_write(buffer, buffer_u8, 13);
                buffer_write(buffer, buffer_u8, maxsmissiles);
                buffer_write(buffer, buffer_u8, clientID);
                for(var i=0; i&lt;sockets; i++){
                    network_send_packet(playerList[| i], buffer, buffer_tell(buffer));
                }
                break;
            case 13:
                var maxpbombs = buffer_read(_buffer, buffer_u8);
                var clientID = buffer_read(_buffer, buffer_u8);
                var sockets = ds_list_size(playerList);
                buffer_delete(buffer);
                var size, type, alignment;
                size = 1024;
                type = buffer_grow;
                alignment = 1;
                buffer = buffer_create(size, type, alignment);
                buffer_seek(buffer, buffer_seek_start, 0);
                buffer_write(buffer, buffer_u8, 14);
                buffer_write(buffer, buffer_u8, maxpbombs);
                buffer_write(buffer, buffer_u8, clientID);
                for(var i=0; i&lt;sockets; i++){
                    network_send_packet(playerList[| i], buffer, buffer_tell(buffer));
                }
                break;
            case 14:
                var maxhealth = buffer_read(_buffer, buffer_u16);
                var clientID = buffer_read(_buffer, buffer_u8);
                var sockets = ds_list_size(playerList);
                buffer_delete(buffer);
                var size, type, alignment;
                size = 1024;
                type = buffer_grow;
                alignment = 1;
                buffer = buffer_create(size, type, alignment);
                buffer_seek(buffer, buffer_seek_start, 0);
                buffer_write(buffer, buffer_u8, 15);
                buffer_write(buffer, buffer_u16, maxhealth);
                buffer_write(buffer, buffer_u8, clientID);
                for(var i=0; i&lt;sockets; i++){
                    network_send_packet(playerList[| i], buffer, buffer_tell(buffer));
                }
                break;
            case 15:
                var etanks = buffer_read(_buffer, buffer_u8);
                var clientID = buffer_read(_buffer, buffer_u8);
                var sockets = ds_list_size(playerList);
                buffer_delete(buffer);
                var size, type, alignment;
                size = 1024;
                type = buffer_grow;
                alignment = 1;
                buffer = buffer_create(size, type, alignment);
                buffer_seek(buffer, buffer_seek_start, 0);
                buffer_write(buffer, buffer_u8, 16);
                buffer_write(buffer, buffer_u8, etanks);
                buffer_write(buffer, buffer_u8, clientID);
                for(var i=0; i&lt;sockets; i++){
                    network_send_packet(playerList[| i], buffer, buffer_tell(buffer));
                }
                break;
            case 16:
                var mtanks = buffer_read(_buffer, buffer_u8);
                var clientID = buffer_read(_buffer, buffer_u8);
                var sockets = ds_list_size(playerList);
                buffer_delete(buffer);
                var size, type, alignment;
                size = 1024;
                type = buffer_grow;
                alignment = 1;
                buffer = buffer_create(size, type, alignment);
                buffer_seek(buffer, buffer_seek_start, 0);
                buffer_write(buffer, buffer_u8, 17);
                buffer_write(buffer, buffer_u8, mtanks);
                buffer_write(buffer, buffer_u8, clientID);
                for(var i=0; i&lt;sockets; i++){
                    network_send_packet(playerList[| i], buffer, buffer_tell(buffer));
                }
                break;
            case 17:
                var stanks = buffer_read(_buffer, buffer_u8);
                var clientID = buffer_read(_buffer, buffer_u8);
                var sockets = ds_list_size(playerList);
                buffer_delete(buffer);
                var size, type, alignment;
                size = 1024;
                type = buffer_grow;
                alignment = 1;
                buffer = buffer_create(size, type, alignment);
                buffer_seek(buffer, buffer_seek_start, 0);
                buffer_write(buffer, buffer_u8, 18);
                buffer_write(buffer, buffer_u8, stanks);
                buffer_write(buffer, buffer_u8, clientID);
                for(var i=0; i&lt;sockets; i++){
                    network_send_packet(playerList[| i], buffer, buffer_tell(buffer));
                }
                break;
            case 18:
                var ptanks = buffer_read(_buffer, buffer_u8);
                var clientID = buffer_read(_buffer, buffer_u8);
                var sockets = ds_list_size(playerList);
                buffer_delete(buffer);
                var size, type, alignment;
                size = 1024;
                type = buffer_grow;
                alignment = 1;
                buffer = buffer_create(size, type, alignment);
                buffer_seek(buffer, buffer_seek_start, 0);
                buffer_write(buffer, buffer_u8, 19);
                buffer_write(buffer, buffer_u8, ptanks);
                buffer_write(buffer, buffer_u8, clientID);
                for(var i=0; i&lt;sockets; i++){
                    network_send_packet(playerList[| i], buffer, buffer_tell(buffer));
                }
                break;
            case 19:
                var gametime = buffer_read(_buffer, buffer_s32);
                var clientID = buffer_read(_buffer, buffer_u8);
                if(ds_list_size(timeList) &gt; 0){
                    var findTime = ds_list_find_index(timeList, gametime);
                    if(findTime == -1){
                        ds_list_add(timeList, gametime);
                    }
                } else {
                    ds_list_add(timeList, gametime);
                }
                break;
            case 50:
                for(var i=0; i&lt;array_length_1d(global.item); i++){
                    var receivedItem = buffer_read(_buffer, buffer_u8);
                    if(receivedItem == 1 &amp;&amp; global.item[i] == 0){
                        global.item[i] = receivedItem;
                    }
                }
                break;
            case 51:
                for(var i=0; i&lt;array_length_1d(global.event); i++){
                    var receivedEvent = buffer_read(_buffer, buffer_u8);
                    if(receivedEvent &gt; global.event[i]){
                        global.event[i] = receivedEvent;
                    }
                }
                break;
            case 52:
                for(var i=0; i&lt;array_length_1d(global.metdead); i++){
                    var receivedMetdead = buffer_read(_buffer, buffer_u8);
                    if(receivedMetdead &gt; global.metdead[i]){
                        global.metdead[i] = receivedMetdead;
                    }
                }
                break;
            case 53:
                for(var i=0; i&lt;array_height_2d(global.dmap); i++){
                    for(var j=0; j&lt;array_length_2d(global.dmap, i); j++){
                        var receiveddmap = buffer_read(_buffer, buffer_u8);
                        if(receiveddmap &gt; global.dmap[i, j]){
                            global.dmap[i, j] = receiveddmap;
                        } else if(receiveddmap == 1 &amp;&amp; global.dmap[i, j]){
                            global.dmap[i, j] = receiveddmap;
                        }
                    }
                }
                break;
    }
    break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>network_destroy(server);
buffer_delete(buffer);
ds_list_destroy(socketList);
ds_list_destroy(vars);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var str;
if(server &gt;= 0){
    str = "Running on " + string(port);
} else {
    str = "Not running, cannot open port";
}


draw_set_font(font0);
draw_text(5, 5, "AM2R Server: " + string(str));
draw_text(5, 20, "Connected Clients: " + string(ds_list_size(playerList)));

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
